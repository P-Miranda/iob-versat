// This file is used as a repository of data.
// A tool runs at compile time to extract all these data and to generate code files.
// Stuff like enums, tables of data and the like are easier to define here.
// Especially because we use certain structures that make it difficult to quickly define literal expressions
// (Ex: hard in C to define a literal expression of Array<String>)
// We can also use this data to generate other helpful code.
// Unless specified otherwise, this file is the source of truth for large amounts of configurable Versat data.
// It should be easy to change the way versat interprets different types of wires and such by changing stuff here.

// Note: Currently everything is a string. Whether the output is the string or the name depends on the types given.
//       Using "" to allow escaping values is currently not supported.

// Note: I do not want to spend much time trying to beef up the parser of these files. Most errors are just gonna 
//       be asserts, segfaults and the likes so be careful changing stuff in here.

// Note: Some of these generate code that uses some predefined naming conventions.
//       Ex: Tables generate an array of structs whose name is the name defined here with the first letter uppercase. 
//           The name of the variable is the same except the first letter is downcase. 
//           (Basically "table Test(...)" produces the code "Array<Test> test = ...")

// Note: The data encoded here should be agnostic to the actual containers. I do not want to see an "Array<String>" even though it is basically what we produce in the final code
//       Part of this approach is to abstract the actual containers used. String is fine, but Array,Hashmap and so on is not.
//       At the same time, stuff like Set is also fine since we are not actually describing the container used but the fact that we are dealing with a list of unique values. (Where order does not matter for the matter of equality, for example)

// TODO: Map should be able to map multiple data into multiple data. Something like map M(A a,B b : C c,D d,E e) to describe a 2 to 3 map.

enum AddressGenType{
   // NONE is not defined so that we do not have to implement full switch
   AddressGenType_MEM  = 1,
   AddressGenType_READ = 2,
   AddressGenType_GEN  = 3
};

map addressGenType(AddressGenType t,String name){
   AddressGenType_MEM : Mem,
   AddressGenType_READ : Read,
   AddressGenType_GEN : Gen,
};

struct AddressGenBaseParameters{
   String start;
   String duty;
   String per;
   String incr;
   String iter;
   String shift;
};

struct AddressVParameters{
   String ext_addr;
   String length;
   String amount_minus_one;
   String extra_delay;
   String addr_shift;
   String enabled;
   String pingPong;
   String start;
   String duty;
   String per;
   String incr;
   String iter;
   String shift;
};

array String AddressGenExtraFormat = {"per%d","incr%d","iter%d","shift%d"};

struct AddressMemParameters{
   String iterA;
   String perA;
   String dutyA;
   String startA;
   String shiftA;
   String incrA;
   String reverseA;
   String extA;
   String in0_wr;
   String iterB;
   String perB;
   String dutyB;
   String startB;
   String shiftB;
   String incrB;
   String reverseB;
   String extB;
   String in1_wr;
};

array String AddressGenMemExtraFormat = {"per%dA","incr%dA","iter%dA","shift%dA","per%dB","incr%dB","iter%dB","shift%dB"};

table AddressGenWireNames(AddressGenType type,String[] names){
   AddressGenType_MEM  : @Members(AddressMemParameters),
   AddressGenType_GEN  : @Members(AddressGenBaseParameters),
   AddressGenType_READ : @Members(AddressVParameters),
};

enum MergeModifier{
   MergeModifier_NONE           = 0x0,
   MergeModifier_NO_UNIT_MERGED = 0x1
};

map mergeModifiers(MergeModifier m,String name){
   MergeModifier_NO_UNIT_MERGED : NoUnitMerged
};

enum ConstructType{
  ConstructType_MODULE,
  ConstructType_MERGE,
  ConstructType_ITERATIVE,
  ConstructType_ADDRESSGEN
};

define_map possibleAttributes{
   VERSAT_LATENCY : versat_latency,
   VERSAT_STATIC  : versat_static,
   VERSAT_STAGE   : versat_stage
};

// Note: The position of the registers is variable and depends on user flags. Some flags add registers and the position of the 
// register on the accelerator changes based on the flags passed.
enum VersatRegister{
   VersatRegister_Control,
   VersatRegister_DmaInternalAddress,
   VersatRegister_DmaExternalAddress,
   VersatRegister_DmaTransferLength,
   VersatRegister_DmaControl,
   VersatRegister_Debug,
   VersatRegister_ProfileControl,
   VersatRegister_ProfileRunCount,
   VersatRegister_ProfileCyclesSinceLastReset,
   VersatRegister_ProfileRunningCycles,
   VersatRegister_ProfileDatabusValid,
   VersatRegister_ProfileDatabusValidAndReady,
   VersatRegister_ProfileConfigurationsSet,
   VersatRegister_ProfileConfigurationsSetWhileRunning,
};

// Any value added here is automatically added to generated accelerator with profiling enabled. No logic is given, we just allocate memory mapped space.
table ProfilingVersatRegisters(VersatRegister t){
   VersatRegister_ProfileControl,
   VersatRegister_ProfileRunCount,
   VersatRegister_ProfileCyclesSinceLastReset,
   VersatRegister_ProfileRunningCycles,
   VersatRegister_ProfileDatabusValid,
   VersatRegister_ProfileDatabusValidAndReady,
   VersatRegister_ProfileConfigurationsSet,
   VersatRegister_ProfileConfigurationsSetWhileRunning,   
};

/*
Not in use currently.
map versatRegister(VersatRegister t,String name){
   VersatRegister_Control              : "Control",
   VersatRegister_DmaInternalAddress   : "Dma Internal Address",
   VersatRegister_DmaExternalAddress   : "Dma External Address",
   VersatRegister_DmaTransferLength    : "Dma Transfer Length",
   VersatRegister_DmaControl           : "Dma Control",
   VersatRegister_Debug                : "Debug",
   VersatRegister_ProfileControl       : "Profile Control"
};
*/

file ExtractVerilatedSignals = ./scripts/ExtractVerilatedSignals.py;
file GetVerilatorRoot = ./scripts/GetVerilatorRoot.sh;

file HeaderTemplate      = ./software/templates/versat_header.tpl;
file MakefileTemplate    = ./software/templates/versat_makefile.tpl;
file TopInstanceTemplate = ./software/templates/versat_top_instance.tpl;
file WrapperTemplate     = ./software/templates/versat_wrapper.tpl;
file VersatTemplate      = ./software/templates/iob_versat_template.tpl;
file FirmwareTemplate    = ./software/templates/iob-versat.tpl;

fileGroup defaultVerilogUnits = ./hardware/src/units;
fileGroup defaultVerilogFiles = ./hardware/src | ./hardware/src/units;
