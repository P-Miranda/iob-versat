// This file is used as a repository of data.
// A tool runs at compile time to extract all these data and to generate code files.
// Stuff like enums, tables of data and the like are easier to define here.
// Especially because we use certain structures that make it difficult to quickly define literal expressions
// (Ex: hard in C to define a literal expression of Array<String>)
// We can also use this data to generate other helpful code.
// Unless specified otherwise, this file is the source of truth for large amounts of configurable Versat data.
// It should be easy to change the way versat interprets different types of wires and such by changing stuff here.

// Note: Currently everything is a string. Whether the output is the string or the name depends on the types given.
//       Using "" to allow escaping values is currently not supported.

// Note: I do not want to spend much time trying to beef up the parser of these files. Most errors are just gonna 
//       be asserts, segfaults and the likes so be careful changing stuff in here.

// Note: Some of these generate code that uses some predefined naming conventions.
//       Ex: Tables generate an array of structs whose name is the name defined here with the first letter uppercase. 
//           The name of the variable is the same except the first letter is downcase. 
//           (Basically "table Test(...)" produces the code "Array<Test> test = ...")

// Note: The data encoded here should be agnostic to the actual containers. I do not want to see an "Array<String>" even though it is basically what we produce in the final code
//       Part of this approach is to abstract the actual containers used. String is fine, but Array,Hashmap and so on is not.
//       At the same time, stuff like Set is also fine since we are not actually describing the container used but the fact that we are dealing with a list of unique values. (Where order does not matter for the matter of equality, for example)

// TODO: Map should be able to map multiple data into multiple data. Something like map M(A a,B b : C c,D d,E e) to describe a 2 to 3 map.

enum AddressGenType{
   AddressGenType_MEM          = 0x01,
   AddressGenType_VREAD_LOAD   = 0x02,
   AddressGenType_VREAD_OUTPUT = 0x04,
   AddressGenType_VWRITE_INPUT = 0x08,
   AddressGenType_VWRITE_STORE = 0x10,
   AddressGenType_READ         = 0x20,
};

map addressGenType(AddressGenType t,String name){
   AddressGenType_MEM : Mem,
   AddressGenType_VREAD_LOAD   : VReadLoad,
   AddressGenType_VREAD_OUTPUT : VReadOutput,
   AddressGenType_VWRITE_INPUT : VWriteInput,
   AddressGenType_VWRITE_STORE : VWriteStore,
   AddressGenType_READ : Read
};

struct AddressReadParameters{
   String ext_addr;
   String read_per;
   String read_duty;
   String read_incr;
   String read_iter;
   String read_shift;
   String read_length;
   String read_amount_minus_one;
   String read_addr_shift;
   String read_enabled;
   String pingPong;
   String output_start;
   String output_per;
   String output_incr;
   String output_duty;
   String output_iter;
   String output_shift;
   String output_per2;
   String output_incr2;
   String output_iter2;
   String output_shift2;
};

// Maybe change to map, although not sure how to do the reverse map from String[] to enum.
table AddressGenWireNames(AddressGenType type,String[] names){
      AddressGenType_MEM          : {iterA,perA,dutyA,startA,shiftA,incrA,reverseA,extA,in0_wr,iter2A,per2A,shift2A,incr2A,
                                  iterB,perB,dutyB,startB,shiftB,incrB,reverseB,extB,in1_wr,iter2B,per2B,shift2B,incr2B},

   AddressGenType_VREAD_LOAD   : {ext_addr,pingPong,read_start,read_per,read_incr,read_duty,read_iter,read_shift,
                                  read_amount_minus_one,read_length,read_addr_shift,read_enabled},

   AddressGenType_VREAD_OUTPUT : {output_duty,output_start,output_extra_delay,output_ignore_first
                                  output_iter, output_per, output_shift, output_incr,
                                  output_iter2,output_per2,output_shift2,output_incr2,
                                  output_iter3,output_per3,output_shift3,output_incr3},

   AddressGenType_VWRITE_INPUT : {ext_addr,pingPong,write_start,write_per,write_incr,write_duty,write_iter,write_shift,
                                  write_amount_minus_one,write_length,write_addr_shift,write_enabled},

   AddressGenType_VWRITE_STORE : {input_duty,input_start,input_extra_delay,input_ignore_first,
                                  input_iter, input_per, input_shift, input_incr,
                                  input_iter2,input_per2,input_shift2,input_incr2},

   AddressGenType_READ         : @Members(AddressReadParameters)   
};

enum MergeModifier{
   MergeModifier_NONE           = 0x0,
   MergeModifier_NO_UNIT_MERGED = 0x1
};

map mergeModifiers(MergeModifier m,String name){
   MergeModifier_NO_UNIT_MERGED : NoUnitMerged
};

define_map possibleAttributes{
   VERSAT_LATENCY : versat_latency,
   VERSAT_STATIC  : versat_static,
   VERSAT_STAGE   : versat_stage
};
